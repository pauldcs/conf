#!/usr/bin/python3
import lldb

# Import this module by running:
#     (lldb) command script import stack.py
#     (lldb) stack

def stack(
        debugger,
        command,
        result,
        internal_dict
    ):
    """
    LLDB module auto-generated by lldbmodgen on Mon Sep  9 00:40:46 CEST 2024.
    """

    target = debugger.GetSelectedTarget()
    process = target.GetProcess()
    thread = process.GetSelectedThread()
    frame = thread.GetFrameAtIndex(0)
    sp = frame.GetSP()
    
    addr_byte_size = target.GetAddressByteSize()
    
    num_elements_before = 4
    num_elements_after = 16
    
    start_addr = sp - num_elements_before * addr_byte_size
    end_addr = sp + num_elements_after * addr_byte_size
    
    for i, addr in enumerate(range(start_addr, end_addr, addr_byte_size)):
        error = lldb.SBError()
        value = process.ReadUnsignedFromMemory(addr, addr_byte_size, error)
        
        if addr == sp:
            sp_marker = "->"
        else:
            sp_marker = "  "
        
        if error.Success():
            print("{} 0x{:x}: 0x{:x}".format(sp_marker, addr, value))
        else:
            print("{} 0x{:x}: Unable to read".format(sp_marker, addr))

def __lldb_init_module(
        debugger,
        internal_dict
    ):
    debugger.HandleCommand('command script add -f stack.stack stack')
    print(' Installed: "stack"')

